/**
 * Ejercicio 8: Resta de Matrices
 * Objetivo: Restar dos matrices A y B en una matriz C
 */

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define FILAS 4
#define COLUMNAS 4

void llenarMatrizAleatoria(int matriz[FILAS][COLUMNAS]) {
    for(int i = 0; i < FILAS; i++) {
        for(int j = 0; j < COLUMNAS; j++) {
            matriz[i][j] = rand() % 10; // Números entre 0 y 9
        }
    }
}

void restarMatrices(int A[FILAS][COLUMNAS], int B[FILAS][COLUMNAS], int C[FILAS][COLUMNAS]) {
    for(int i = 0; i < FILAS; i++) {
        for(int j = 0; j < COLUMNAS; j++) {
            C[i][j] = A[i][j] - B[i][j];
        }
    }
}

void imprimirMatriz(int matriz[FILAS][COLUMNAS], char nombre) {
    printf("Matriz %c:\n", nombre);
    for(int i = 0; i < FILAS; i++) {
        printf("| ");
        for(int j = 0; j < COLUMNAS; j++) {
            printf("%3d  ", matriz[i][j]); // %3d para alinear números negativos
        }
        printf("|\n");
    }
}

void mostrarProcesoResta(int A[FILAS][COLUMNAS], int B[FILAS][COLUMNAS], int C[FILAS][COLUMNAS]) {
    printf("\n=== PROCESO DE RESTA ===\n");
    
    for(int i = 0; i < FILAS; i++) {
        // Mostrar fila de matriz A
        printf("| ");
        for(int j = 0; j < COLUMNAS; j++) {
            printf("%2d  ", A[i][j]);
        }
        printf("|   ");
        
        // Mostrar símbolo de resta en la fila del medio
        if(i == FILAS / 2) {
            printf("-   ");
        } else {
            printf("    ");
        }
        
        // Mostrar fila de matriz B
        printf("| ");
        for(int j = 0; j < COLUMNAS; j++) {
            printf("%2d  ", B[i][j]);
        }
        printf("|   ");
        
        // Mostrar símbolo de igual en la fila del medio
        if(i == FILAS / 2) {
            printf("=   ");
        } else {
            printf("    ");
        }
        
        // Mostrar fila de matriz resultado C
        printf("| ");
        for(int j = 0; j < COLUMNAS; j++) {
            printf("%3d  ", C[i][j]); // %3d para números negativos
        }
        printf("|\n");
    }
}

void demostrarCalculoElemento(int A[FILAS][COLUMNAS], int B[FILAS][COLUMNAS], int C[FILAS][COLUMNAS]) {
    printf("\n=== DEMOSTRACIÓN DE CÁLCULO ===\n");
    printf("Fórmula: C[i][j] = A[i][j] - B[i][j]\n\n");
    
    // Mostrar cálculo para algunos elementos representativos
    int elementosMostrar = 4;
    int posiciones[4][2] = {{0,0}, {1,1}, {2,2}, {3,3}}; // Diagonal principal
    
    for(int k = 0; k < elementosMostrar; k++) {
        int i = posiciones[k][0];
        int j = posiciones[k][1];
        printf("C[%d][%d] = A[%d][%d] - B[%d][%d] = %d - %d = %d\n", 
               i, j, i, j, i, j, A[i][j], B[i][j], C[i][j]);
    }
}

int main() {
    int A[FILAS][COLUMNAS], B[FILAS][COLUMNAS], C[FILAS][COLUMNAS];
    
    // Inicializar semilla para números aleatorios
    srand(time(NULL));
    
    printf("=== EJERCICIO 8: RESTA DE MATRICES ===\n");
    printf("C[i][j] = A[i][j] - B[i][j]\n\n");
    
    // Llenar matrices A y B con valores aleatorios
    llenarMatrizAleatoria(A);
    llenarMatrizAleatoria(B);
    
    // Restar matrices: C = A - B
    restarMatrices(A, B, C);
    
    // Mostrar matrices y resultado
    imprimirMatriz(A, 'A');
    printf("\n");
    imprimirMatriz(B, 'B');
    printf("\n");
    
    mostrarProcesoResta(A, B, C);
    
    printf("\n");
    imprimirMatriz(C, 'C');
    
    // Mostrar información adicional
    demostrarCalculoElemento(A, B, C);
    
    printf("\n¡Ejercicio 8 completado!\n");
    return 0;
}
